{"mappings":"AAyBA,MAAMA,EAAO,CACXC,SAAUC,SAASC,cAAc,6BACjCC,QAASF,SAASC,cAAc,4BAChCE,UAAWH,SAASC,cAAc,kBAwDpC,MAAMG,EAAQ,IArDd,MASEC,OACE,MAAMC,EAAOC,KAAKC,kBAAkB,GACpCD,KAAKE,OAAOH,E,CAGdI,QACE,GAAIH,KAAKI,SACP,OAGF,MAAMC,EAAYC,KAAKC,MACvBP,KAAKI,UAAW,EAEhBJ,KAAKQ,WAAaC,aAAY,KAC5B,MACMC,EADcJ,KAAKC,MACOF,EAC1BN,EAAOC,KAAKC,kBAAkBS,GAEpCV,KAAKE,OAAOH,EAAK,GAChB,I,CAGLY,OACEC,cAAcZ,KAAKQ,YACnBR,KAAKI,UAAW,EAChB,MAAML,EAAOC,KAAKC,kBAAkB,GACpCD,KAAKE,OAAOH,E,CAGdE,kBAAkBF,GAOhB,MAAO,C,MANOC,KAAKa,IACjBC,KAAKC,MAAMhB,EAAS,MAAyB,O,KAElCC,KAAKa,IAAIC,KAAKC,MAAMhB,EAAS,KAAoB,M,KACjDC,KAAKa,IAAIC,KAAKC,MAAMhB,EAAS,IAAc,M,CAK1Dc,IAAIG,GACF,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,CAhDnCC,aAAYjB,OAAEA,IACZF,KAAKQ,WAAa,KAClBR,KAAKI,UAAW,EAChBJ,KAAKE,OAASA,EAEdF,KAAKF,M,GA+Ce,CACtBI,OAMF,UAAyBkB,MAAEA,EAAKC,KAAEA,EAAIC,KAAEA,IACtC/B,EAAKK,UAAU2B,YAAc,GAAGH,KAASC,KAAQC,G,IAJnD/B,EAAKC,SAASgC,iBAAiB,QAAS3B,EAAMM,MAAMsB,KAAK5B,IACzDN,EAAKI,QAAQ6B,iBAAiB,QAAS3B,EAAMc,KAAKc,KAAK5B,IAMvD6B,QAAQC,IAAI,SAAU9B","sources":["src/js/async/async-promises.js"],"sourcesContent":["// const notification = document.querySelector(\".js-alert\");\n// let timeoutId = null;\n// const NOTIFICATION_DELAY = 3000;\n\n// showNotification();\n\n// notification.addEventListener(\"click\", () => {\n//     hideNotification();\n//     clearInterval(timeoutId);\n//     console.log(\"таймер очищен и не сработает\");\n// });\n\n// function showNotification() {\n//     notification.classList.add(\"is-visible\");\n\n//     timeoutId = setTimeout(() => {\n//         console.log(\"сработал таймер\");\n//         hideNotification();\n//     }, NOTIFICATION_DELAY);\n// };\n\n// function hideNotification() {\n//     notification.classList.remove(\"is-visible\")\n// };\n\nconst refs = {\n  startBtn: document.querySelector('button[data-action-start]'),\n  stopBtn: document.querySelector('button[data-action-stop]'),\n  clockface: document.querySelector('.js-clockface'),\n};\n\nclass Timer {\n  constructor({ onTick }) {\n    this.intervalId = null;\n    this.isActive = false;\n    this.onTick = onTick;\n\n    this.init();\n    };\n\n  init() {\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n    };\n\n  start() {\n    if (this.isActive) {\n      return;\n      };\n      \n    const startTime = Date.now();\n    this.isActive = true;\n\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = currentTime - startTime;\n      const time = this.getTimeComponents(deltaTime);\n\n      this.onTick(time);\n    }, 1000);\n    };\n\n  stop() {\n    clearInterval(this.intervalId);\n    this.isActive = false;\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n    };\n\n  getTimeComponents(time) {\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n    );\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { hours, mins, secs };\n    };\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n    };\n};\n\nconst timer = new Timer({\n  onTick: updateClockface,\n});\n\nrefs.startBtn.addEventListener('click', timer.start.bind(timer));\nrefs.stopBtn.addEventListener('click', timer.stop.bind(timer));\n\nfunction updateClockface({ hours, mins, secs }) {\n  refs.clockface.textContent = `${hours}:${mins}:${secs}`;\n};\n\nconsole.log(\"timer \", timer);\n\n\n\n"],"names":["$11e14c8fc33922cb$var$refs","startBtn","document","querySelector","stopBtn","clockface","$11e14c8fc33922cb$var$timer","init","time","this","getTimeComponents","onTick","start","isActive","startTime","Date","now","intervalId","setInterval","deltaTime","stop","clearInterval","pad","Math","floor","value","String","padStart","constructor","hours","mins","secs","textContent","addEventListener","bind","console","log"],"version":3,"file":"async-promises.2b4ed09e.js.map"}